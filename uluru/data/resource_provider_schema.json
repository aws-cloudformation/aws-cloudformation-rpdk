{
    "$id": "http://www.cloudformation.com/resource.schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "CloudFormation Resource Provider Schema",
    "description": "This schema validates a CloudFormation resource type schema.",
    "type": "object",
    "properties": {
        "Documentation": {
            "type": "string",
            "format": "uri"
        },
        "Type": {
            "type": "string",
            "pattern": "^([0-9a-zA-Z]{3,64})::([0-9a-zA-Z]{3,64})::([0-9a-zA-Z]{3,64})$"
        },
        "IdentifierPaths": {
            "type": "array",
            "items": {
                "type": "string",
                "format": "json-pointer"
            },
            "uniqueItems": true
        },
        "Definitions": {
            "type": "object",
            "additionalProperties": { "$ref": "#/definitions/nestedResourceProperty" },
            "default": {}
        },
        "Properties": {
            "type": "object",
            "additionalProperties": { "$ref": "#/definitions/anyProperty" },
            "default": {}
        },
        "PhysicalResourceId": {
            "$comment": "Is the physicalResourceId the identifierPath(s), an Id generated by the service, or an ARN?",
            "enum": [
                "identifier",
                "id",
                "arn"
            ]
        },
        "Relationships": {
            "$comment": "Describes the relationships which exist between this resource and other entities",
            "type": "array",
            "items": {
                "$ref": "#/definitions/relationship"
            }
        },
        "Permissions": {
            "$comment": "Describes the permissions which are required to invoke CRUDL APIs against this resource. Interpretation of this data will be vendor-specific.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/permission"
            }
        },
        "Handlers": {
            "properties": {
                "CreateHandler": {
                    "$ref": "#/definitions/handler"
                },
                "UpdateHandler": {
                    "$ref": "#/definitions/handler"
                },
                "DeleteHandler": {
                    "$ref": "#/definitions/handler"
                },
                "ReadHandler": {
                    "$ref": "#/definitions/handler"
                },
                "ListHandler": {
                    "$ref": "#/definitions/handler"
                }
            },
            "required": [
                "CreateHandler",
                "DeleteHandler",
                "ReadHandler",
                "ListHandler"
            ],
            "additionalProperties": false
        }
    },
    "required": [
        "Type",
        "PhysicalResourceId",
        "Properties",
        "Handlers"
    ],
    "additionalProperties": false,
    "definitions": {
        "anyProperty": {
            "type": "object",
            "anyOf": [
                {
                    "$ref": "#/definitions/arrayProperty"
                },
                {
                    "$ref": "#/definitions/booleanProperty"
                },
                {
                    "$ref": "#/definitions/numberProperty"
                },
                {
                    "$ref": "#/definitions/mapProperty"
                },
                {
                    "$ref": "#/definitions/stringProperty"
                },
                {
                    "$ref": "#/definitions/definedResourceProperty"
                },
                {
                    "$ref": "#/definitions/nestedResourceProperty"
                }
            ]
        },
        "property": {
            "properties": {
                "Documentation": {
                    "type": "string",
                    "format": "uri"
                },
                "ReadType": {
                    "$ref": "#/definitions/readType",
                    "default": "ReadWrite"
                },
                "UpdateType": {
                    "$ref": "#/definitions/updateType"
                },
                "Required": {
                    "type": "boolean",
                    "default": false
                },
                "ImmutableValues": {
                    "$comment": "When conditionally immutable, the list of values that make this property immutable",
                    "type": "array"
                },
                "Excludes": {
                    "$comment": "List of property references which must not be present in order to specify this property",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "json-pointer"
                    }
                },
                "Requires": {
                    "$comment": "List of property references which must also be present in order to specify this property",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "json-pointer"
                    }
                },
                "RemovalBehavior": {
                    "$comment": "What is the behavior when removing this property on an update (only applies to mutable properties)?  Indeterminate means basically 'it depends'",
                    "enum": [
                        "remove",
                        "setToDefault",
                        "no-op",
                        "indeterminate"
                    ],
                    "default": "indeterminate"
                }
            },
            "required": [
                "UpdateType",
                "Type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "RemovalBehavior": {
                                "enum": [
                                    "setToDefault"
                                ]
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "Default"
                        ]
                    }
                }
            ]
        },
        "arrayProperty": {
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "$comment": "An array can either be a set or a list. A set means that for template diffs order does not matter, while a list indiciates that it does",
                    "enum": [
                        "set",
                        "list"
                    ]
                },
                "ItemType": {
                    "type": "string"
                },
                "Validation": {
                    "$comment": "Validation rules which can be provided at the document level but which cannot be schematised",
                    "type": "object",
                    "properties": {
                        "MaxLength": {
                            "type": "integer"
                        },
                        "MinLength": {
                            "type": "integer"
                        },
                        "DuplicatesAllowed": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "ItemType"
            ]
        },
        "booleanProperty": {
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "type": "string",
                    "enum": [
                        "boolean"
                    ]
                },
                "Default": {
                    "$comment": "The default value applied to this property if not explicitly specified",
                    "type": "boolean"
                }
            }
        },
        "numberProperty": {
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "type": "string",
                    "enum": [
                        "integer",
                        "number"
                    ]
                },
                "Default": {
                    "$comment": "The default value applied to this property if not explicitly specified",
                    "$ref": "#/definitions/numberType"
                },
                "Validation": {
                    "$comment": "Validation rules which can be provided at the document level but which cannot be schematised",
                    "type": "object",
                    "properties": {
                        "MaxValue": {
                            "type": "integer"
                        },
                        "MinValue": {
                            "type": "integer"
                        },
                        "AllowedValues": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "numberType": {
            "if": {
                "properties": {
                    "Type": {
                        "enum": [
                            "number"
                        ]
                    }
                }
            },
            "then": {
                "type": [
                    "number"
                ]
            },
            "else": {
                "type": [
                    "integer"
                ]
            }
        },
        "mapProperty": {
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "enum": [
                        "map"
                    ]
                },
                "ItemType": {
                    "$comment": "This could be either a primitive type or a subResource type",
                    "type": "string"
                },
                "Validation": {
                    "type": "object",
                    "properties": {
                        "MaxLength": {
                            "type": "integer"
                        },
                        "MinLength": {
                            "type": "integer"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "ItemType"
            ]
        },
        "stringProperty": {
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "type": "string",
                    "enum": [
                        "string"
                    ]
                },
                "Default": {
                    "$comment": "The default value applied to this property if not explicitly specified",
                    "type": "string"
                },
                "Validation": {
                    "type": "object",
                    "properties": {
                        "MaxLength": {
                            "type": "integer"
                        },
                        "MinLength": {
                            "type": "integer"
                        },
                        "AllowedValues": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "Pattern": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "nestedResourceProperty": {
            "properties": {
                "Type": {
                    "type": "string",
                    "enum": [
                        "object"
                    ]
                },
                "Properties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#/definitions/anyProperty" },
                    "default": {},
                    "minProperties": 1
                }
            },
            "required": [
                "Properties"
            ],
            "additionalProperties": false
        },
        "definedResourceProperty": {
            "$comment": "A reference to a subResource defined by the provider in their definitions section",
            "allOf": [
                {
                    "$ref": "#/definitions/property"
                }
            ],
            "properties": {
                "Type": {
                    "type": "object",
                    "required": [
                        "$ref"
                    ]
                }
            }
        },
        "readType": {
            "$comment": "This setting determines whether a property is ReadOnly (e.g; an ARN), WriteOnly (e.g; Database Password) or ReadWrite (any updatable property)",
            "type": "string",
            "default": "ReadWrite",
            "enum": [
                "ReadOnly",
                "WriteOnly",
                "ReadWrite"
            ]
        },
        "updateType": {
            "$comment": "This setting determines the impact of mutating a property during a create/update operation",
            "type": "string",
            "enum": [
                "Mutable",
                "Immutable",
                "Conditional"
            ]
        },
        "permission": {
            "properties": {
                "Organization": {
                    "$comment": "ex: aws, microsoft, etc. -- allows for additional validation/codegen",
                    "type": "string"
                },
                "Target": {
                    "type": "string",
                    "format": "uri"
                },
                "Type": {
                    "type": "string",
                    "enum": [
                        "Requires",
                        "RequiredBy",
                        "RelatedTo",
                        "Uses",
                        "UsedBy"
                    ]
                }
            },
            "additionalProperties": false
        },
        "relationship": {
            "properties": {
                "Target": {
                    "type": "string",
                    "format": "uri"
                },
                "Type": {
                    "type": "string",
                    "enum": [
                        "Requires",
                        "RequiredBy",
                        "RelatedTo",
                        "Uses",
                        "UsedBy"
                    ]
                }
            },
            "additionalProperties": false
        },
        "handler": {
            "properties": {
                "InvocationType": {
                    "enum": [
                        "Synchronous",
                        "Asynchronous"
                    ]
                },
                "FlowType": {
                    "$comment": "Invoke these apis sequentially, or does it require more complex logic? (workflow) TODO: naming, more options",
                    "enum": [
                        "sequential",
                        "workflow"
                    ],
                    "default": "sequential"
                },
                "ApiCalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiCall"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "InvocationType"
            ],
            "additionalProperties": false
        },
        "apiCall": {
            "properties": {
                "Name": {
                    "type": "string"
                },
                "ActionType": {
                    "enum": [
                        "read",
                        "write"
                    ]
                },
                "Idempotency": {
                    "$comment": "How does the api handle an idempotent request?",
                    "enum": [
                        "Token",
                        "Duplicate",
                        "Put",
                        "Exception"
                    ]
                },
                "Exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlerException"
                    }
                },
                "Stabilization": {
                    "$ref": "#/definitions/stabilization"
                },
                "PropertiesUsed": {
                    "$comment": "Represents a list of properties passed into the api call",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "json-pointer"
                    }
                },
                "AlwaysInvoked": {
                    "$comment": "Will this api be invoked even if the property isn't set?",
                    "type": "boolean"
                },
                "Permissions": {
                    "$comment": "Describes the permissions which are required to invoke this API. TODO: Can we assume there will only be 1 permission per API?",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permission"
                    }
                }
            },
            "required": [
                "Name",
                "ActionType"
            ],
            "allOf": [
                {
                    "$comment": "for write actions, you must also define idempotency",
                    "if": {
                        "properties": {
                            "ActionType": {
                                "enum": [
                                    "write"
                                ]
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "Idempotency"
                        ]
                    }
                }
            ],
            "additionalProperties": false
        },
        "handlerException": {
            "properties": {
                "Name": {
                    "$comment": "This could be an error code, status code, etc.",
                    "type": "string"
                },
                "Response": {
                    "$comment": "Custom would mean to follow custom logic if this exception occurs",
                    "enum": [
                        "Success",
                        "Failure",
                        "Retry",
                        "Custom"
                    ]
                }
            },
            "required": [
                "Name",
                "Response"
            ],
            "additionalProperties": false
        },
        "stabilization": {
            "properties": {
                "DefaultTimeout": {
                    "$comment": "Called 'DefaultTimeout' to allow for custom stabilization times in the future",
                    "type": "number"
                },
                "TimeoutUnit": {
                    "enum": [
                        "Seconds",
                        "Minutes",
                        "Hours"
                    ]
                },
                "SuccessValues": {
                    "type": "array"
                },
                "FailureValues": {
                    "type": "array"
                }
            },
            "required": [
                "DefaultTimeout",
                "TimeoutUnit"
            ],
            "additionalProperties": false
        }
    }
}